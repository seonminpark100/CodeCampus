-- User 생성
-- c##을 넣지 않기 위해 세션 설정을 해줘야 함
ALTER SESSION SET "_ORACLE_SCRIPT" =true;

-- 1. 사용자 계정 생성 및 암호설정
CREATE USER CodeCampus IDENTIFIED BY 123456; -- 권한 부여하지 않아 로그인 제한됨

-- 2. 권한 부여
GRANT CREATE SESSION TO CodeCampus; -- session(접속) 권한만 줌
GRANT CREATE TABLE TO CodeCampus; -- 테이블 생성 권한 줌
GRANT CONNECT, RESOURCE TO CodeCampus; 

commit;

SELECT * FROM dba_users where username = 'CODECAMPUS';
ALTER USER CodeCampus QUOTA 2m ON users;

-- 혜진 정의서
-- 시퀀스 생성 
CREATE SEQUENCE seq_serial_num
    INCREMENT BY 1 -- 증가치 1
    START WITH 100 -- 초기값 :100
    MINVALUE 99 -- 최소값: 99
    MAXVALUE 110 -- 최대값: 110
    CYCLE -- 최대값 도달시 시작값부터 재시작할지 여부: yes
    NOCACHE; -- 캐시메모리 사용 여부: no 
-- 오류남

DROP SEQUENCE seq_serial_num;
DELETE FROM MAJORS;
create sequence seq_serial_num
    increment by 1  -- 1씩 증가
    start with 1    -- 시작값 1
    minvalue 1      -- 최소값 1
    nomaxvalue      -- 최대값은 무한대
    nocycle         -- 순환하지 않음.
    nocache;        -- 캐시 안 함.

DROP TABLE ABSENTS;
DROP TABLE ASSIGNMENT;
DROP TABLE ASSIGNMENT_SUBMIT;
DROP TABLE ENROLL;
DROP TABLE LECTURE;
DROP TABLE USER_INFO;
DROP TABLE BOARDS;

COMMIT;

CREATE TABLE ABSENTS (
    ABSENT_IDX      NUMBER(6) NOT NULL,
    LECTURE_CODE    VARCHAR2(100 BYTE) NOT NULL,
    USER_ID         VARCHAR2(100 BYTE) NOT NULL,
    ABSENT_STATE    VARCHAR2(50 BYTE) NOT NULL,
    ORIGIN_IMAGE    VARCHAR2(200 BYTE),
    SAVED_IMAGE     VARCHAR2(200 BYTE),
    LECTURE_DATE    DATE NOT NULL,
    ATTENDANCE_TIME DATE
);

ALTER TABLE ABSENTS ADD CONSTRAINT ABSENTS_PK PRIMARY KEY ( ABSENT_IDX );

DROP TABLE ASSIGNMENT CASCADE CONSTRAINTS ;
CREATE TABLE ASSIGNMENT (
    ASSIGNMENT_IDX     NUMBER(6) NOT NULL,
    ASSIGNMENT_TITLE   VARCHAR2(100 BYTE) NOT NULL,
    ASSIGNMENT_CONTENT VARCHAR2(4000 BYTE) NOT NULL,
    UPLOADED_DATE    DATE NOT NULL,
    DEADLINE    DATE NOT NULL,
    LECTURE_CODE       VARCHAR2(100 BYTE) NOT NULL
);
ALTER TABLE ASSIGNMENT ADD CONSTRAINT ASSIGNMENT_PK PRIMARY KEY ( ASSIGNMENT_IDX );

CREATE TABLE ASSIGNMENT_SUBMIT (
    ASSIGNMENT_IDX        NUMBER(6) NOT NULL,
    ASSIGNMENT_SUBMIT_IDX NUMBER(6) NOT NULL,
    ASSIGNMENT_CONTENT_S  VARCHAR2(4000 BYTE),
    ASSIGNMENT_COMMENT    VARCHAR2(4000),
    ASSIGNMENT_OFILE      VARCHAR2(400 BYTE),
    ASSIGNMENT_SFILE      VARCHAR2(400 BYTE),
    SCORE                 NUMBER(3, 1),
    ENROLL_IDX            NUMBER(6) NOT NULL
);

ALTER TABLE ASSIGNMENT_SUBMIT ADD CONSTRAINT ASSIGNMENT_SUBMIT_PK PRIMARY KEY ( ASSIGNMENT_SUBMIT_IDX );

CREATE TABLE BOARDS (
    BOARD_IDX      NUMBER(6) NOT NULL,
    USER_ID        VARCHAR2(100 BYTE) NOT NULL,
    BOARD_TITLE    VARCHAR2(100 BYTE) NOT NULL,
    BOARD_CONTENT  VARCHAR2(4000 BYTE) NOT NULL,
    BOARD_POSTDATE DATE NOT NULL,
    OFILE          BLOB,
    SFILE          BLOB,
    DOWNCOUNT      NUMBER(6) default 0 NOT NULL,
    VISITCOUNT     NUMBER(6) default 0 NOT NULL,
    CATEGORY       VARCHAR2(10 BYTE) NOT NULL,
    BGROUP         NUMBER(6) NOT NULL,
    BSTEP          NUMBER(6) NOT NULL,
    BINDENT        NUMBER(6) NOT NULL,
    BOARD_LIKE     NUMBER(6) default 0 NOT NULL
);

ALTER TABLE BOARDS ADD CONSTRAINT BOARD_IDX PRIMARY KEY ( BOARD_IDX );

CREATE TABLE ENROLL (
    USER_ID      VARCHAR2(100 BYTE) NOT NULL,
    LECTURE_CODE VARCHAR2(100 BYTE) NOT NULL,
    ENROLL_IDX   NUMBER(6) NOT NULL
);

ALTER TABLE ENROLL ADD CONSTRAINT ENROLL_PK PRIMARY KEY ( ENROLL_IDX );

CREATE TABLE LECTURE (
    LECTURE_IDX        NUMBER(6) NOT NULL,
    LECTURE_NAME       VARCHAR2(100 BYTE) NOT NULL,
    PROF_ID            VARCHAR2(100 BYTE) NOT NULL,
    LECTURE_START_DATE DATE NOT NULL,
    LECTURE_END_DATE   DATE NOT NULL,
    LECTURE_CODE       VARCHAR2(100 BYTE) NOT NULL,
    MAJOR_ID           VARCHAR2(100 BYTE) NOT NULL
);

ALTER TABLE LECTURE ADD CONSTRAINT LECTURE_PK PRIMARY KEY ( LECTURE_CODE );

CREATE TABLE MAJORS (
    MAJOR_ID   VARCHAR2(100 BYTE) NOT NULL,
    MAJOR_NAME VARCHAR2(100 BYTE) NOT NULL
);

ALTER TABLE MAJORS ADD CONSTRAINT MAJORS_PK PRIMARY KEY ( MAJOR_ID );

CREATE TABLE USER_INFO (
    USER_ID        VARCHAR2(100 BYTE) NOT NULL,
    USER_PW        VARCHAR2(100 BYTE) NOT NULL,
    USER_NAME      VARCHAR2(50 BYTE) NOT NULL,
    USER_GENDER    VARCHAR2(50 BYTE) NOT NULL,
    USER_EMAIL     VARCHAR2(100 BYTE) NOT NULL,
    USER_PHONENUM  VARCHAR2(50 BYTE) NOT NULL,
    USER_ADDR      VARCHAR2(150 BYTE) NOT NULL,
    USER_BIRTHDATE DATE NOT NULL,
    JOINDATE       DATE NOT NULL,
    AUTHORITY      VARCHAR2(50 BYTE) NOT NULL,
    SAVEFILE       BLOB,
    ORIGINALFILE   BLOB,
    MAJOR_ID       VARCHAR2(100 BYTE) NOT NULL,
    ENABLE         NUMBER(2) NOT NULL
);

ALTER TABLE USER_INFO ADD CONSTRAINT USER_INFO_PK PRIMARY KEY ( USER_ID );

SELECT *, count(*) FROM LECTURE;

SELECT * FROM majors;
SELECT * FROM user_info WHERE AUTHORITY='ROLE_PROF';













SELECT * FROM user_info WHERE authority='ROLE_PROF' and user_id ='20251038';
SELECT * FROM enroll where user_id = '20251038';
SELECT * FROM lecture WHERE lecture_code = 'ENV301';
select * from lecture;


		SELECT 
			lecture_idx,
			lecture_name,
			prof_id,
			lecture_start_date,
			lecture_end_date,
			l.lecture_code,
			u.major_id,
			u.user_name prof_name
		FROM lecture l, user_info u,
        (SELECT lecture_code, u.user_id, u.user_name 
          FROM enroll e, user_info u
          WHERE e.user_id = u.user_id
          ) s
		WHERE l.prof_id = u.user_id
         AND l.lecture_code = s.lecture_code
         AND s.user_id = '20251039'
          