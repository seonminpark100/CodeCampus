package com.lms.springboot.utils;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.UUID;

import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class MyFunctions
{
	/*
		UUID(Universally Unique IDentifier) : 직역하면 범용 고유 식별자라고한다.
			JDK에서 기본적으로 제공되는 클래스로 32자의 영문과 숫자를 포함한 고유한
			문자열을 반환해준다. 
	 */
	public static String getUuid()
	{
		String  uuid = UUID.randomUUID().toString();
		uuid = uuid.replace("-", "");
		System.out.println("생성된 UUID :" + uuid);
		return uuid;
	}
	
	//파일명 변경 
	public static String renameFile(String sDirectory, String fileName)
	{
		//파일의 확장자를 파일명의 끝에서부터 잘라낸다. 
		String ext = fileName.substring(fileName.lastIndexOf("."));
		//파일명으로 사용할 UUID를 얻어온다. 
		String now = getUuid();
		//둘을 합쳐 새로운 파일명을 만든다.
		String newFileName = now + ext;
		
		//기존파일과 새로운파일의 객체를 만든 후 이름을 변경한다. 
		File oldFile = new File(sDirectory + File.separator + fileName);
		File newFile = new File(sDirectory + File.separator + newFileName);
		oldFile.renameTo(newFile);
		
		//변경된 파일명을 반환한다. 
		return newFileName;
	}

//	다운로드
	public static void download(HttpServletRequest req, HttpServletResponse resp, 
			String directory, String sfileName, String ofileName) {
		
		String sDirectory = req.getServletContext().getRealPath(directory);
		
		try
		{
//			파일을 찾아 입력스트림 생성
			File file = new File(sDirectory, sfileName);
			InputStream iStream = new FileInputStream(file);
			
//			한글 파일명 꺠짐 방지 (13장 Download.jsp에서 복사 붙여넣기)
			String client = req.getHeader("User-Agent");
		    if (client.indexOf("WOW64") == -1) {
		        ofileName = new String(ofileName.getBytes("UTF-8"), "ISO-8859-1"); // 익스플로러가 아닌 경우
		    }
		    else {
		    	ofileName = new String(ofileName.getBytes("KSC5601"), "ISO-8859-1"); // 익스플로러인 경우
		    }
			
		    resp.reset(); // 응답 헤더 초기화
		    resp.setContentType("application/octet-stream"); 
		    /* 파일 다운로드 창이 뜰때 원본 파일명이 뜨도록 설정 */
		    resp.setHeader("Content-Disposition", 
		                       "attachment; filename=\"" + ofileName + "\"");
		    resp.setHeader("Content-Length", "" + file.length() );
		    
		    
		    // response 내장 객체로부터 새로운 출력 스트림 생성
		    OutputStream oStream = resp.getOutputStream();  

		    // 출력 스트림에 파일 내용 출력 (버퍼를 사용하면 처리속도가 빨라짐)
		    byte b[] = new byte[(int)file.length()];
		    int readBuffer = 0;    
		    while ( (readBuffer = iStream.read(b)) > 0 ) {
		    	oStream.write(b, 0, readBuffer);
		    }
		    
//		    입출력 스트림 닫음
		    iStream.close();
		    oStream.close();
		    
		} catch (FileNotFoundException e)
		{
			System.out.println("파일을 찾을 수 없습니다.");
			e.printStackTrace();
		} catch (Exception e)
		{
			System.out.println("예외가 발생했습니다.");
			e.printStackTrace();
		}
	}
	
}
