/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.40
 * Generated at: 2025-05-24 09:13:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._14MVCBoard;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class SignUp_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("	<head>\n");
      out.write("		<meta charset=\"UTF-8\">\n");
      out.write("		<title>자유게시판</title>\n");
      out.write("		\n");
      out.write("		<script>\n");
      out.write("		\n");
      out.write("		function validateForm(form) {  // 폼 내용 검증\n");
      out.write("		    if (form.name.value == \"\") {\n");
      out.write("		        alert(\"이름을 입력하세요.\");\n");
      out.write("		        form.name.focus();\n");
      out.write("		        return false;\n");
      out.write("		    }\n");
      out.write("		    if (form.id.value == \"\") {\n");
      out.write("		        alert(\"아이디를 입력하세요.\");\n");
      out.write("		        form.id.focus();\n");
      out.write("		        return false;\n");
      out.write("		    }\n");
      out.write("		    if (form.pass.value == \"\") {\n");
      out.write("		        alert(\"비밀번호를 입력하세요.\");\n");
      out.write("		        form.pass.focus();\n");
      out.write("		        return false;\n");
      out.write("		    }\n");
      out.write("		    if (form.idCheckbtn.value != \"checked\") {\n");
      out.write("		        alert(\"아이디 중복확인을 해주세요.\");\n");
      out.write("		        return false;\n");
      out.write("		    }\n");
      out.write("		    \n");
      out.write("		    return true; \n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		function idCheck(form){\n");
      out.write("			if(form.id.value == \"\"){\n");
      out.write("				alert(\"아이디를 입력해주세요\");\n");
      out.write("				form.id.focus();\n");
      out.write("				return false;\n");
      out.write("			}\n");
      out.write("			var url = \"");
      out.print(request.getContextPath());
      out.write("/mvcboard/idcheck.do?id=\" + form.id.value;\n");
      out.write("		    window.open(url, \"_blank_1\", \"width=500,height=300, toolbar=no,menubar=no,resizable=no,scrollbars=yes\");\n");
      out.write("		}\n");
      out.write("		\n");
      out.write("		</script>\n");
      out.write("	</head>\n");
      out.write("	<body>\n");
      out.write("	  ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../Common/Link.jsp", out, false);
      out.write("\n");
      out.write("	  \n");
      out.write("		<div class= \"container\">\n");
      out.write("			<form name=\"writeFrm\" method=\"post\" action=\"\" onsubmit=\"return validateForm(this);\">\n");
      out.write("		    	이름: &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <input type=\"text\" name=\"name\"/> <br/>\n");
      out.write("		    	아이디: &nbsp;&nbsp;&nbsp;<input type=\"text\" name=\"id\"/> \n");
      out.write("		    	<!-- 중복체크하기 -->\n");
      out.write("		    	<input type=\"button\" value=\"중복 체크\" onclick=\"return idCheck(this.form)\" />\n");
      out.write("				<input type=\"hidden\" name=\"idCheckbtn\" value=\"unchecked\">\n");
      out.write("		    	\n");
      out.write("		    	<br/>\n");
      out.write("		    	비밀번호: <input type=\"password\" name=\"pass\"/> <br/><br/>\n");
      out.write("	            <button type=\"submit\">회원가입</button>\n");
      out.write("	            <button type=\"reset\">다시입력</button>\n");
      out.write("	            \n");
      out.write("			</form>\n");
      out.write("		</div>\n");
      out.write("		\n");
      out.write("		\n");
      out.write("      ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../Common/Bottom.jsp", out, false);
      out.write("\n");
      out.write("	</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
